# lines(predict.mod.ridge, col="red", lty=2)
# mtext(side=2, line=2.5, "Scaled Ammonia")
# mtext(side=1, line=2.5, "Observations (5 min interval)")
#
# legend("right",inset=c(-.5,0),
#        legend=c("Actual NH4","Linear Forecast\nw/ Sine Cosine"),
#        col=c("black","red"), lty=c(1,2) ,y.intersp=1.5)
# Adaptive lasso
w3 <- 1/abs(matrix(coef(mod.ridge, s=mod.ridge$lambda.min)[, 1][-1]))^1
set.seed(Sys.time())
mod.adaptive <- cv.glmnet(train.xx,train.yy,alpha=1,penalty.factor=w3)
pred.adapt <- predict(mod.adaptive,newx=train.xx, s='lambda.1se')
# Calculate training error
SSE <- mean((train.yy-pred.adapt)^2)
SST <- mean((train.yy-mean(train.yy))^2)
Rsqu.adapt <- 1-SSE/SST;Rsqu
RMSE.adapt <- sqrt(SSE)
SSE <- mean((train.yy-train.xx[,predict.col])^2)
Rsqu.persistence <- 1-SSE/SST;Rsqu
RMSE.persistence <- sqrt(SSE)
# Forecast
pred.adapt <- predict(mod.adaptive,newx=test.xx, s='lambda.1se')
pred.persistence <- test.xx[,predict.col]
# Save results
# if(i==1) {
testing.results <- data.frame("Test.time"= test.index,
"Actual.forecast" = as.numeric(test.yy),
"LM.forecast" = as.numeric(pred.adapt),
"Persistence.forecast" = as.numeric(pred.persistence),
"Training.R2.LM" = as.numeric(Rsqu.adapt),
"Training.RMSE.LM" = as.numeric(RMSE.adapt),
"Diurnal.forecast" =as.numeric(pred.lm),
"Training.R2.D"=as.numeric(Rsqu.lm),
"Training.RMSE.D"=as.numeric(RMSE.lm))
# } else {
#   testing.results <- rbind(testing.results,
#                            data.frame("Test.time"= test.index,
#                                 "Actual.forecast" = as.numeric(test.yy),
#                                 "LM.forecast" = as.numeric(pred.adapt),
#                                 "Persistence.forecast" = as.numeric(pred.persistence),
#                                 "Training.R2.LM" = as.numeric(Rsqu.adapt),
#                                 "Training.RMSE.LM" = as.numeric(RMSE.adapt),
#                                 "Diurnal.forecast" =as.numeric(pred.lm),
#                                 "Training.R2.D"=as.numeric(Rsqu.lm),
#                                 "Training.RMSE.D"=as.numeric(RMSE.lm)))
# }
# print(paste("Completed", obj, days, f, i,"in",(total.obs-2*f-training.obs+1)))
return(testing.results)
}))
View(testing.results)
str(sapply(1:3, function(i) {
# What is the forecast horizon? (given in number of steps & number of minutes )
horizon.min <- seq(5,75,by=5)
horizon.steps <- horizon.min/5
# Days to train on
training.days <- days
training.obs <- training.days*24*60/5
total.obs <- nrow(obj.data)
testing.obs <- total.obs-training.obs
testing.days <- testing.obs/(24*60/5)
# Setup training and testing data for model
current.obs <- training.obs+f+i-1
train.xx <- matrix(as.numeric(obj.data[i:(current.obs-f),]), nrow=length(i:(current.obs-f)), byrow=FALSE)
train.yy <- matrix(as.numeric(obj.data[(i+f):current.obs, predict.col]), nrow=length(i:(current.obs-f)), byrow=FALSE)
n <- intersect(which(!is.na(train.yy)), which(!apply(train.xx,1,anyNA)))
train.xx <- train.xx[n,]
train.yy <- train.yy[n,]
test.xx <- matrix(as.numeric(obj.data[current.obs,]), nrow=1, byrow=FALSE)
test.yy <- matrix(as.numeric(obj.data[(current.obs+f), predict.col]), nrow=1, byrow=FALSE)
test.index <- index(obj.data[current.obs,])
# Train diurnal model
diurnal.terms <- c(grep("cos", colnames(obj.data)), grep("sin", colnames(obj.data)))
mod.lm <- cv.glmnet(train.xx[,diurnal.terms],train.yy, alpha=0)
pred.lm <- predict(mod.lm, newx=train.xx[,diurnal.terms])
# Calculate training error
SSE <- mean((train.yy-pred.lm)^2)
SST <- mean((train.yy-mean(train.yy))^2)
Rsqu.lm <- 1-SSE/SST;Rsqu
RMSE.lm <- sqrt(SSE)
pred.lm <- predict(mod.lm, newx=t(test.xx[,diurnal.terms]))
# Train model when lambda=0 (initial parameter estimate)
mod.ridge <- cv.glmnet(train.xx,train.yy,alpha=0)
predict.mod.ridge <- predict(mod.ridge, newx=train.xx)
# # Plot training
# par(mar=c(3.5,3.5,1,10),xpd=TRUE, cex=0.9, family="serif")
# plot(train.yy,ylab="",xlab="", type="l", ylim=c(min(predict.mod.ridge),max(train.yy)))
# lines(predict.mod.ridge, col="red", lty=2)
# mtext(side=2, line=2.5, "Scaled Ammonia")
# mtext(side=1, line=2.5, "Observations (5 min interval)")
#
# legend("right",inset=c(-.5,0),
#        legend=c("Actual NH4","Linear Forecast\nw/ Sine Cosine"),
#        col=c("black","red"), lty=c(1,2) ,y.intersp=1.5)
# Adaptive lasso
w3 <- 1/abs(matrix(coef(mod.ridge, s=mod.ridge$lambda.min)[, 1][-1]))^1
set.seed(Sys.time())
mod.adaptive <- cv.glmnet(train.xx,train.yy,alpha=1,penalty.factor=w3)
pred.adapt <- predict(mod.adaptive,newx=train.xx, s='lambda.1se')
# Calculate training error
SSE <- mean((train.yy-pred.adapt)^2)
SST <- mean((train.yy-mean(train.yy))^2)
Rsqu.adapt <- 1-SSE/SST;Rsqu
RMSE.adapt <- sqrt(SSE)
SSE <- mean((train.yy-train.xx[,predict.col])^2)
Rsqu.persistence <- 1-SSE/SST;Rsqu
RMSE.persistence <- sqrt(SSE)
# Forecast
pred.adapt <- predict(mod.adaptive,newx=test.xx, s='lambda.1se')
pred.persistence <- test.xx[,predict.col]
# Save results
# if(i==1) {
testing.results <- data.frame("Test.time"= test.index,
"Actual.forecast" = as.numeric(test.yy),
"LM.forecast" = as.numeric(pred.adapt),
"Persistence.forecast" = as.numeric(pred.persistence),
"Training.R2.LM" = as.numeric(Rsqu.adapt),
"Training.RMSE.LM" = as.numeric(RMSE.adapt),
"Diurnal.forecast" =as.numeric(pred.lm),
"Training.R2.D"=as.numeric(Rsqu.lm),
"Training.RMSE.D"=as.numeric(RMSE.lm))
# } else {
#   testing.results <- rbind(testing.results,
#                            data.frame("Test.time"= test.index,
#                                 "Actual.forecast" = as.numeric(test.yy),
#                                 "LM.forecast" = as.numeric(pred.adapt),
#                                 "Persistence.forecast" = as.numeric(pred.persistence),
#                                 "Training.R2.LM" = as.numeric(Rsqu.adapt),
#                                 "Training.RMSE.LM" = as.numeric(RMSE.adapt),
#                                 "Diurnal.forecast" =as.numeric(pred.lm),
#                                 "Training.R2.D"=as.numeric(Rsqu.lm),
#                                 "Training.RMSE.D"=as.numeric(RMSE.lm)))
# }
# print(paste("Completed", obj, days, f, i,"in",(total.obs-2*f-training.obs+1)))
return(testing.results)
})
)
str(apply(1:3, function(i) {
# What is the forecast horizon? (given in number of steps & number of minutes )
horizon.min <- seq(5,75,by=5)
horizon.steps <- horizon.min/5
# Days to train on
training.days <- days
training.obs <- training.days*24*60/5
total.obs <- nrow(obj.data)
testing.obs <- total.obs-training.obs
testing.days <- testing.obs/(24*60/5)
# Setup training and testing data for model
current.obs <- training.obs+f+i-1
train.xx <- matrix(as.numeric(obj.data[i:(current.obs-f),]), nrow=length(i:(current.obs-f)), byrow=FALSE)
train.yy <- matrix(as.numeric(obj.data[(i+f):current.obs, predict.col]), nrow=length(i:(current.obs-f)), byrow=FALSE)
n <- intersect(which(!is.na(train.yy)), which(!apply(train.xx,1,anyNA)))
train.xx <- train.xx[n,]
train.yy <- train.yy[n,]
test.xx <- matrix(as.numeric(obj.data[current.obs,]), nrow=1, byrow=FALSE)
test.yy <- matrix(as.numeric(obj.data[(current.obs+f), predict.col]), nrow=1, byrow=FALSE)
test.index <- index(obj.data[current.obs,])
# Train diurnal model
diurnal.terms <- c(grep("cos", colnames(obj.data)), grep("sin", colnames(obj.data)))
mod.lm <- cv.glmnet(train.xx[,diurnal.terms],train.yy, alpha=0)
pred.lm <- predict(mod.lm, newx=train.xx[,diurnal.terms])
# Calculate training error
SSE <- mean((train.yy-pred.lm)^2)
SST <- mean((train.yy-mean(train.yy))^2)
Rsqu.lm <- 1-SSE/SST;Rsqu
RMSE.lm <- sqrt(SSE)
pred.lm <- predict(mod.lm, newx=t(test.xx[,diurnal.terms]))
# Train model when lambda=0 (initial parameter estimate)
mod.ridge <- cv.glmnet(train.xx,train.yy,alpha=0)
predict.mod.ridge <- predict(mod.ridge, newx=train.xx)
# # Plot training
# par(mar=c(3.5,3.5,1,10),xpd=TRUE, cex=0.9, family="serif")
# plot(train.yy,ylab="",xlab="", type="l", ylim=c(min(predict.mod.ridge),max(train.yy)))
# lines(predict.mod.ridge, col="red", lty=2)
# mtext(side=2, line=2.5, "Scaled Ammonia")
# mtext(side=1, line=2.5, "Observations (5 min interval)")
#
# legend("right",inset=c(-.5,0),
#        legend=c("Actual NH4","Linear Forecast\nw/ Sine Cosine"),
#        col=c("black","red"), lty=c(1,2) ,y.intersp=1.5)
# Adaptive lasso
w3 <- 1/abs(matrix(coef(mod.ridge, s=mod.ridge$lambda.min)[, 1][-1]))^1
set.seed(Sys.time())
mod.adaptive <- cv.glmnet(train.xx,train.yy,alpha=1,penalty.factor=w3)
pred.adapt <- predict(mod.adaptive,newx=train.xx, s='lambda.1se')
# Calculate training error
SSE <- mean((train.yy-pred.adapt)^2)
SST <- mean((train.yy-mean(train.yy))^2)
Rsqu.adapt <- 1-SSE/SST;Rsqu
RMSE.adapt <- sqrt(SSE)
SSE <- mean((train.yy-train.xx[,predict.col])^2)
Rsqu.persistence <- 1-SSE/SST;Rsqu
RMSE.persistence <- sqrt(SSE)
# Forecast
pred.adapt <- predict(mod.adaptive,newx=test.xx, s='lambda.1se')
pred.persistence <- test.xx[,predict.col]
# Save results
# if(i==1) {
testing.results <- data.frame("Test.time"= test.index,
"Actual.forecast" = as.numeric(test.yy),
"LM.forecast" = as.numeric(pred.adapt),
"Persistence.forecast" = as.numeric(pred.persistence),
"Training.R2.LM" = as.numeric(Rsqu.adapt),
"Training.RMSE.LM" = as.numeric(RMSE.adapt),
"Diurnal.forecast" =as.numeric(pred.lm),
"Training.R2.D"=as.numeric(Rsqu.lm),
"Training.RMSE.D"=as.numeric(RMSE.lm))
# } else {
#   testing.results <- rbind(testing.results,
#                            data.frame("Test.time"= test.index,
#                                 "Actual.forecast" = as.numeric(test.yy),
#                                 "LM.forecast" = as.numeric(pred.adapt),
#                                 "Persistence.forecast" = as.numeric(pred.persistence),
#                                 "Training.R2.LM" = as.numeric(Rsqu.adapt),
#                                 "Training.RMSE.LM" = as.numeric(RMSE.adapt),
#                                 "Diurnal.forecast" =as.numeric(pred.lm),
#                                 "Training.R2.D"=as.numeric(Rsqu.lm),
#                                 "Training.RMSE.D"=as.numeric(RMSE.lm)))
# }
# print(paste("Completed", obj, days, f, i,"in",(total.obs-2*f-training.obs+1)))
return(testing.results)
}))
testing.results <- do.call("rbind", lapply(1:3, function(i) {
# What is the forecast horizon? (given in number of steps & number of minutes )
horizon.min <- seq(5,75,by=5)
horizon.steps <- horizon.min/5
# Days to train on
training.days <- days
training.obs <- training.days*24*60/5
total.obs <- nrow(obj.data)
testing.obs <- total.obs-training.obs
testing.days <- testing.obs/(24*60/5)
# Setup training and testing data for model
current.obs <- training.obs+f+i-1
train.xx <- matrix(as.numeric(obj.data[i:(current.obs-f),]), nrow=length(i:(current.obs-f)), byrow=FALSE)
train.yy <- matrix(as.numeric(obj.data[(i+f):current.obs, predict.col]), nrow=length(i:(current.obs-f)), byrow=FALSE)
n <- intersect(which(!is.na(train.yy)), which(!apply(train.xx,1,anyNA)))
train.xx <- train.xx[n,]
train.yy <- train.yy[n,]
test.xx <- matrix(as.numeric(obj.data[current.obs,]), nrow=1, byrow=FALSE)
test.yy <- matrix(as.numeric(obj.data[(current.obs+f), predict.col]), nrow=1, byrow=FALSE)
test.index <- index(obj.data[current.obs,])
# Train diurnal model
diurnal.terms <- c(grep("cos", colnames(obj.data)), grep("sin", colnames(obj.data)))
mod.lm <- cv.glmnet(train.xx[,diurnal.terms],train.yy, alpha=0)
pred.lm <- predict(mod.lm, newx=train.xx[,diurnal.terms])
# Calculate training error
SSE <- mean((train.yy-pred.lm)^2)
SST <- mean((train.yy-mean(train.yy))^2)
Rsqu.lm <- 1-SSE/SST;Rsqu
RMSE.lm <- sqrt(SSE)
pred.lm <- predict(mod.lm, newx=t(test.xx[,diurnal.terms]))
# Train model when lambda=0 (initial parameter estimate)
mod.ridge <- cv.glmnet(train.xx,train.yy,alpha=0)
predict.mod.ridge <- predict(mod.ridge, newx=train.xx)
# # Plot training
# par(mar=c(3.5,3.5,1,10),xpd=TRUE, cex=0.9, family="serif")
# plot(train.yy,ylab="",xlab="", type="l", ylim=c(min(predict.mod.ridge),max(train.yy)))
# lines(predict.mod.ridge, col="red", lty=2)
# mtext(side=2, line=2.5, "Scaled Ammonia")
# mtext(side=1, line=2.5, "Observations (5 min interval)")
#
# legend("right",inset=c(-.5,0),
#        legend=c("Actual NH4","Linear Forecast\nw/ Sine Cosine"),
#        col=c("black","red"), lty=c(1,2) ,y.intersp=1.5)
# Adaptive lasso
w3 <- 1/abs(matrix(coef(mod.ridge, s=mod.ridge$lambda.min)[, 1][-1]))^1
set.seed(Sys.time())
mod.adaptive <- cv.glmnet(train.xx,train.yy,alpha=1,penalty.factor=w3)
pred.adapt <- predict(mod.adaptive,newx=train.xx, s='lambda.1se')
# Calculate training error
SSE <- mean((train.yy-pred.adapt)^2)
SST <- mean((train.yy-mean(train.yy))^2)
Rsqu.adapt <- 1-SSE/SST;Rsqu
RMSE.adapt <- sqrt(SSE)
SSE <- mean((train.yy-train.xx[,predict.col])^2)
Rsqu.persistence <- 1-SSE/SST;Rsqu
RMSE.persistence <- sqrt(SSE)
# Forecast
pred.adapt <- predict(mod.adaptive,newx=test.xx, s='lambda.1se')
pred.persistence <- test.xx[,predict.col]
# Save results
# if(i==1) {
testing.results <- data.frame("Test.time"= test.index,
"Actual.forecast" = as.numeric(test.yy),
"LM.forecast" = as.numeric(pred.adapt),
"Persistence.forecast" = as.numeric(pred.persistence),
"Training.R2.LM" = as.numeric(Rsqu.adapt),
"Training.RMSE.LM" = as.numeric(RMSE.adapt),
"Diurnal.forecast" =as.numeric(pred.lm),
"Training.R2.D"=as.numeric(Rsqu.lm),
"Training.RMSE.D"=as.numeric(RMSE.lm))
# } else {
#   testing.results <- rbind(testing.results,
#                            data.frame("Test.time"= test.index,
#                                 "Actual.forecast" = as.numeric(test.yy),
#                                 "LM.forecast" = as.numeric(pred.adapt),
#                                 "Persistence.forecast" = as.numeric(pred.persistence),
#                                 "Training.R2.LM" = as.numeric(Rsqu.adapt),
#                                 "Training.RMSE.LM" = as.numeric(RMSE.adapt),
#                                 "Diurnal.forecast" =as.numeric(pred.lm),
#                                 "Training.R2.D"=as.numeric(Rsqu.lm),
#                                 "Training.RMSE.D"=as.numeric(RMSE.lm)))
# }
# print(paste("Completed", obj, days, f, i,"in",(total.obs-2*f-training.obs+1)))
return(testing.results)
}))
View(testing.results)
testing.results <- do.call("rbind", lapply(1:3, function(i) {
# What is the forecast horizon? (given in number of steps & number of minutes )
horizon.min <- seq(5,75,by=5)
horizon.steps <- horizon.min/5
# Days to train on
training.days <- days
training.obs <- training.days*24*60/5
total.obs <- nrow(obj.data)
testing.obs <- total.obs-training.obs
testing.days <- testing.obs/(24*60/5)
# Setup training and testing data for model
current.obs <- training.obs+f+i-1
train.xx <- matrix(as.numeric(obj.data[i:(current.obs-f),]), nrow=length(i:(current.obs-f)), byrow=FALSE)
train.yy <- matrix(as.numeric(obj.data[(i+f):current.obs, predict.col]), nrow=length(i:(current.obs-f)), byrow=FALSE)
n <- intersect(which(!is.na(train.yy)), which(!apply(train.xx,1,anyNA)))
train.xx <- train.xx[n,]
train.yy <- train.yy[n,]
test.xx <- matrix(as.numeric(obj.data[current.obs,]), nrow=1, byrow=FALSE)
test.yy <- matrix(as.numeric(obj.data[(current.obs+f), predict.col]), nrow=1, byrow=FALSE)
test.index <- index(obj.data[current.obs,])
# Train diurnal model
diurnal.terms <- c(grep("cos", colnames(obj.data)), grep("sin", colnames(obj.data)))
mod.lm <- cv.glmnet(train.xx[,diurnal.terms],train.yy, alpha=0)
pred.lm <- predict(mod.lm, newx=train.xx[,diurnal.terms])
# Calculate training error
SSE <- mean((train.yy-pred.lm)^2)
SST <- mean((train.yy-mean(train.yy))^2)
Rsqu.lm <- 1-SSE/SST;Rsqu
RMSE.lm <- sqrt(SSE)
pred.lm <- predict(mod.lm, newx=t(test.xx[,diurnal.terms]))
# Train model when lambda=0 (initial parameter estimate)
mod.ridge <- cv.glmnet(train.xx,train.yy,alpha=0)
predict.mod.ridge <- predict(mod.ridge, newx=train.xx)
# # Plot training
# par(mar=c(3.5,3.5,1,10),xpd=TRUE, cex=0.9, family="serif")
# plot(train.yy,ylab="",xlab="", type="l", ylim=c(min(predict.mod.ridge),max(train.yy)))
# lines(predict.mod.ridge, col="red", lty=2)
# mtext(side=2, line=2.5, "Scaled Ammonia")
# mtext(side=1, line=2.5, "Observations (5 min interval)")
#
# legend("right",inset=c(-.5,0),
#        legend=c("Actual NH4","Linear Forecast\nw/ Sine Cosine"),
#        col=c("black","red"), lty=c(1,2) ,y.intersp=1.5)
# Adaptive lasso
w3 <- 1/abs(matrix(coef(mod.ridge, s=mod.ridge$lambda.min)[, 1][-1]))^1
set.seed(Sys.time())
mod.adaptive <- cv.glmnet(train.xx,train.yy,alpha=1,penalty.factor=w3)
pred.adapt <- predict(mod.adaptive,newx=train.xx, s='lambda.1se')
# Calculate training error
SSE <- mean((train.yy-pred.adapt)^2)
SST <- mean((train.yy-mean(train.yy))^2)
Rsqu.adapt <- 1-SSE/SST;Rsqu
RMSE.adapt <- sqrt(SSE)
SSE <- mean((train.yy-train.xx[,predict.col])^2)
Rsqu.persistence <- 1-SSE/SST;Rsqu
RMSE.persistence <- sqrt(SSE)
# Forecast
pred.adapt <- predict(mod.adaptive,newx=test.xx, s='lambda.1se')
pred.persistence <- test.xx[,predict.col]
# Save results
# if(i==1) {
testing.results <- data.frame("Test.time"= test.index,
"Actual.forecast" = as.numeric(test.yy),
"LM.forecast" = as.numeric(pred.adapt),
"Persistence.forecast" = as.numeric(pred.persistence),
"Training.R2.LM" = as.numeric(Rsqu.adapt),
"Training.RMSE.LM" = as.numeric(RMSE.adapt),
"Diurnal.forecast" =as.numeric(pred.lm),
"Training.R2.D"=as.numeric(Rsqu.lm),
"Training.RMSE.D"=as.numeric(RMSE.lm))
# } else {
#   testing.results <- rbind(testing.results,
#                            data.frame("Test.time"= test.index,
#                                 "Actual.forecast" = as.numeric(test.yy),
#                                 "LM.forecast" = as.numeric(pred.adapt),
#                                 "Persistence.forecast" = as.numeric(pred.persistence),
#                                 "Training.R2.LM" = as.numeric(Rsqu.adapt),
#                                 "Training.RMSE.LM" = as.numeric(RMSE.adapt),
#                                 "Diurnal.forecast" =as.numeric(pred.lm),
#                                 "Training.R2.D"=as.numeric(Rsqu.lm),
#                                 "Training.RMSE.D"=as.numeric(RMSE.lm)))
# }
# print(paste("Completed", obj, days, f, i,"in",(total.obs-2*f-training.obs+1)))
return(testing.results)
}))
View(testing.results)
library(glmnet)
start <- Sys.time()
for(obj in obj.list[1]) {
obj.data <- get(obj)
predict.col <- which(colnames(obj.data) == "Z7.NH4")
if(paste0("all-days-",obj,".RData") %in% list.files(path="results/")) {
next
} else {
all.days <- list()
for(days in 1:7) {
all.horizons <- list()
for(f in horizon.steps) {
# for(i in 1:(total.obs-2*f-training.obs+1)) { # Faster to do this in an lapply loop
testing.results <- do.call("rbind", lapply(1:(total.obs-2*f-training.obs+1), function(i) {
# What is the forecast horizon? (given in number of steps & number of minutes )
horizon.min <- seq(5,75,by=5)
horizon.steps <- horizon.min/5
# Days to train on
training.days <- days
training.obs <- training.days*24*60/5
total.obs <- nrow(obj.data)
testing.obs <- total.obs-training.obs
testing.days <- testing.obs/(24*60/5)
# Setup training and testing data for model
current.obs <- training.obs+f+i-1
train.xx <- matrix(as.numeric(obj.data[i:(current.obs-f),]), nrow=length(i:(current.obs-f)), byrow=FALSE)
train.yy <- matrix(as.numeric(obj.data[(i+f):current.obs, predict.col]), nrow=length(i:(current.obs-f)), byrow=FALSE)
n <- intersect(which(!is.na(train.yy)), which(!apply(train.xx,1,anyNA)))
train.xx <- train.xx[n,]
train.yy <- train.yy[n,]
test.xx <- matrix(as.numeric(obj.data[current.obs,]), nrow=1, byrow=FALSE)
test.yy <- matrix(as.numeric(obj.data[(current.obs+f), predict.col]), nrow=1, byrow=FALSE)
test.index <- index(obj.data[current.obs,])
# Train diurnal model
diurnal.terms <- c(grep("cos", colnames(obj.data)), grep("sin", colnames(obj.data)))
mod.lm <- cv.glmnet(train.xx[,diurnal.terms],train.yy, alpha=0)
pred.lm <- predict(mod.lm, newx=train.xx[,diurnal.terms])
# Calculate training error
SSE <- mean((train.yy-pred.lm)^2)
SST <- mean((train.yy-mean(train.yy))^2)
Rsqu.lm <- 1-SSE/SST;Rsqu
RMSE.lm <- sqrt(SSE)
pred.lm <- predict(mod.lm, newx=t(test.xx[,diurnal.terms]))
# Train model when lambda=0 (initial parameter estimate)
mod.ridge <- cv.glmnet(train.xx,train.yy,alpha=0)
predict.mod.ridge <- predict(mod.ridge, newx=train.xx)
# # Plot training
# par(mar=c(3.5,3.5,1,10),xpd=TRUE, cex=0.9, family="serif")
# plot(train.yy,ylab="",xlab="", type="l", ylim=c(min(predict.mod.ridge),max(train.yy)))
# lines(predict.mod.ridge, col="red", lty=2)
# mtext(side=2, line=2.5, "Scaled Ammonia")
# mtext(side=1, line=2.5, "Observations (5 min interval)")
#
# legend("right",inset=c(-.5,0),
#        legend=c("Actual NH4","Linear Forecast\nw/ Sine Cosine"),
#        col=c("black","red"), lty=c(1,2) ,y.intersp=1.5)
# Adaptive lasso
w3 <- 1/abs(matrix(coef(mod.ridge, s=mod.ridge$lambda.min)[, 1][-1]))^1
set.seed(Sys.time())
mod.adaptive <- cv.glmnet(train.xx,train.yy,alpha=1,penalty.factor=w3)
pred.adapt <- predict(mod.adaptive,newx=train.xx, s='lambda.1se')
# Calculate training error
SSE <- mean((train.yy-pred.adapt)^2)
SST <- mean((train.yy-mean(train.yy))^2)
Rsqu.adapt <- 1-SSE/SST;Rsqu
RMSE.adapt <- sqrt(SSE)
SSE <- mean((train.yy-train.xx[,predict.col])^2)
Rsqu.persistence <- 1-SSE/SST;Rsqu
RMSE.persistence <- sqrt(SSE)
# Forecast
pred.adapt <- predict(mod.adaptive,newx=test.xx, s='lambda.1se')
pred.persistence <- test.xx[,predict.col]
# Save results
# if(i==1) {
testing.results <- data.frame("Test.time"= test.index,
"Actual.forecast" = as.numeric(test.yy),
"LM.forecast" = as.numeric(pred.adapt),
"Persistence.forecast" = as.numeric(pred.persistence),
"Training.R2.LM" = as.numeric(Rsqu.adapt),
"Training.RMSE.LM" = as.numeric(RMSE.adapt),
"Diurnal.forecast" =as.numeric(pred.lm),
"Training.R2.D"=as.numeric(Rsqu.lm),
"Training.RMSE.D"=as.numeric(RMSE.lm))
# } else {
#   testing.results <- rbind(testing.results,
#                            data.frame("Test.time"= test.index,
#                                 "Actual.forecast" = as.numeric(test.yy),
#                                 "LM.forecast" = as.numeric(pred.adapt),
#                                 "Persistence.forecast" = as.numeric(pred.persistence),
#                                 "Training.R2.LM" = as.numeric(Rsqu.adapt),
#                                 "Training.RMSE.LM" = as.numeric(RMSE.adapt),
#                                 "Diurnal.forecast" =as.numeric(pred.lm),
#                                 "Training.R2.D"=as.numeric(Rsqu.lm),
#                                 "Training.RMSE.D"=as.numeric(RMSE.lm)))
# }
# print(paste("Completed", obj, days, f, i,"in",(total.obs-2*f-training.obs+1)))
return(testing.results)
}))
all.horizons[[length(all.horizons)+1]] <- testing.results
}
all.days[[length(all.days)+1]] <- all.horizons
}
assign(paste0("all.days.",obj), all.days)
save(list=paste0("all.days.",obj), file=paste0("results/all-days-",obj,".RData"))
rm(list=paste0("all.days.",obj))
}
}
i
training.days <- days
training.obs <- training.days*24*60/5
total.obs <- nrow(obj.data)
testing.obs <- total.obs-training.obs
testing.days <- testing.obs/(24*60/5)
mtcars
str(mtcars)
configurations <- data.frame("Control"=c("DO", "Ammonia", "Ammonia", "Ammonia"),
"Setpoint" = c(2.5,3.5,4.0,4.0),
"PID delay" = c(90, 90, 90, 300),
row.names=c("Control", "Test 1", "Test 2", "Test 3"))
